//
//  <%= klass.name %>+NightVersion.m
//  <%= klass.name %>+NightVersion
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "<%= klass.name %>+NightVersion.h"
#import "DKNightVersionManager.h"
#import "DKNightVersionUtility.h"
<% if klass.all_superklass_name %><% klass.all_superklass_name.reverse.each do |name| %><%= "#import \"#{name}+NightVersion.h\"\n" %><% end %><% end %>
<% klass.all_properties.each do |property| %><% if property.name == 'barTintColor' %><%= '#import "UINavigationBar+Animation.h"' %><% end %><% end %>

@implementation <%= klass.name %> (NightVersion)

#pragma mark - ChangeColor

- (void)changeColorWithDuration:(CGFloat)duration {
    if ([DKNightVersionUtility shouldChangeColor:self]) {
        <% klass.all_properties.each do |property| %><% if property.name == 'barTintColor' && klass.name == 'UINavigationBar' %><%= "[self animateNavigationBarToColor:([DKNightVersionManager currentThemeVersion] == DKThemeVersionNight) ? self.night#{property.cap_name} : self.normal#{property.cap_name} duration:duration];" %><% end %><% end %>
        [UIView animateWithDuration:duration animations:^{
            <% klass.all_properties.each do |property| %><% if property.name != 'barTintColor' %><%= "[self #{property.set_color_method("([DKNightVersionManager currentThemeVersion] == DKThemeVersionNight) ? self.night#{property.cap_name} : self.normal#{property.cap_name}")}];" %>
            <% end %><% end %>
        }];
    }
}

- (void)changeColor {
    if ([DKNightVersionUtility shouldChangeColor:self]) {
        <% klass.all_properties.each do |property| %><%= "[self #{property.set_color_method("([DKNightVersionManager currentThemeVersion] == DKThemeVersionNight) ? self.night#{property.cap_name} : self.normal#{property.cap_name}")}];" %>
        <% end %>
    }
}

@end
