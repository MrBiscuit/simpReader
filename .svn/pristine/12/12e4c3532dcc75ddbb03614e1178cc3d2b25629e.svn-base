//
//  AppDelegate.m
//  ProjectAlpha
//
//  Created by lanou3g on 10/22/15.
//  Copyright © 2015 com.sunshuaiqi. All rights reserved.
//

#import "AppDelegate.h"
#import "ArticlesListViewController.h"
#import "MediaListViewController.h"
#import "ProfileViewController.h"
#import "AlphaIcons.h"
#import <AVOSCloud/AVOSCloud.h>
#import <AVOSCloudSNS.h>
#import "UINavigationBar+Awesome.h"
#import "ProjectAlpha-Swift.h"
#import "DataHandle.h"

@interface AppDelegate ()<UITabBarControllerDelegate>

@property(nonatomic, strong) UITabBarController *tabBarController;
@property(nonatomic, strong) ArticlesListViewController *articlesListViewController;
@property(nonatomic, strong) MediaListViewController *mediaListViewController;
@property(nonatomic, strong) ProfileViewController *profileViewController;

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    
    _window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    [_window makeKeyAndVisible];
    
    if ([userDefaults colorForKey:@"light"]) {
        _window.backgroundColor = [userDefaults colorForKey:@"light"];
    }else{
        _window.backgroundColor = [UIColor whiteColor];
    }
    [self initialSetUp];
    _window.rootViewController = _tabBarController;
    [AVOSCloud setApplicationId:AVOSCloudAppID clientKey:AVOSCloudAppKey];

    _tabBarController.delegate = self;
    [AVOSCloud setLastModifyEnabled:YES];
    [self userLoginStatusChanged:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(userLoginStatusChanged:) name:@"userLoggedIn" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(themeColorUpdate:) name:@"themeColorUpdate" object:nil];
    [AVAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
    [self HTTPManagerReachability];
    return YES;
}

#pragma mark- 网络监测--
-(void)HTTPManagerReachability{
    [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        
        switch (status) {
            case AFNetworkReachabilityStatusNotReachable: {
                
                [self showAlertViewWithTitleString:@"请检查网络连接状态"];
                break;
            }
            case AFNetworkReachabilityStatusReachableViaWWAN: {
                
                [self showAlertViewWithTitleString:@"当前网络连接状态:3G/4G"];
                break;
            }
            case AFNetworkReachabilityStatusReachableViaWiFi: {
                
                [self showAlertViewWithTitleString:@"当前网络连接状态:WIFI"];
                break;
            }
            default:
                break;
        }
    }];
    
    // 开始监控
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    
}
- (void)showAlertViewWithTitleString:(NSString *)titleString {
    
    UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:titleString message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil, nil];
    [alertView show];
    [self performSelector:@selector(dismissAlerView:) withObject:alertView afterDelay:2.f];
}

- (void)dismissAlerView:(UIAlertView *)alertView {
    
    [alertView dismissWithClickedButtonIndex:0 animated:YES];
}


-(void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController{
    [self setTabbarImageWithSize:35];
    tabBarController.tabBar.frame = CGRectMake(0, ScreenHeight -49, ScreenWidth, 49);
}

#pragma mark- 初始化
- (void)initialSetUp{
    _articlesListViewController = [ArticlesListViewController new];
    _mediaListViewController = [MediaListViewController new];
    _profileViewController = [ProfileViewController new];
    
    // 创建底部选项卡控制器
    _tabBarController = [UITabBarController new];
    
    // 添加主页面到选项卡控制器 (注: 美图 和 视界 带有导航控制器 )
    _tabBarController.viewControllers = @[[[UINavigationController alloc] initWithRootViewController:_articlesListViewController], [[UINavigationController alloc] initWithRootViewController:_mediaListViewController], [[UINavigationController alloc] initWithRootViewController:_profileViewController]];
   
    if ([userDefaults colorForKey:@"dark"]) {
        _articlesListViewController.navigationController.navigationBar.barTintColor = [userDefaults colorForKey:@"dark"];
        _mediaListViewController.navigationController.navigationBar.barTintColor = [userDefaults colorForKey:@"dark"];
        _profileViewController.navigationController.navigationBar.barTintColor = [userDefaults colorForKey:@"dark"];
        _tabBarController.tabBar.barTintColor = [userDefaults colorForKey:@"dark"];

    }else{
#pragma mark 制定导航栏和状态栏颜色
        [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];
        
        [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:0 green:0.6863 blue:0.9412 alpha:1]];
        
        [[UINavigationBar appearance] setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys: [UIColor whiteColor], NSForegroundColorAttributeName, [UIFont systemFontOfSize:21], NSFontAttributeName, nil]];
#pragma mark- 制定选项卡控制器材质颜色
        _tabBarController.tabBar.barTintColor = [UIColor colorWithRed:0 green:0.6863 blue:0.9412 alpha:1];

    }
    // 哈哈 这句话虽然报错 BUT IT WORKS!
    [[UINavigationBar appearance] setBarStyle:UIStatusBarStyleLightContent];
    #pragma mark 制定页面导航栏标题
    _articlesListViewController.navigationItem.title = @"图文";
    _mediaListViewController.navigationItem.title = @"视界";
    _profileViewController.navigationItem.title = @"我";
    
    #pragma mark 指定页面选项卡标题
    _articlesListViewController.tabBarItem.title = nil;
    _mediaListViewController.tabBarItem.title = nil;
    _profileViewController.tabBarItem.title = nil;
    
    #pragma mark 制定选项卡页面图标尺寸

    _tabBarController.tabBar.items[0].imageInsets = UIEdgeInsetsMake(2.5, -2.5, -7.5, -2.5);
    _tabBarController.tabBar.items[1].imageInsets =  UIEdgeInsetsMake(2.5, -2.5, -7.5, -2.5);
    _tabBarController.tabBar.items[2].imageInsets = UIEdgeInsetsMake(2.5, -2.5, -7.5, -2.5);
    _tabBarController.tabBar.itemPositioning = UITabBarItemPositioningCentered;
//    _tabBarController.tabBarItem.titlePositionAdjustment = (UIOffsetMake(0, -100));
    [self setTabbarImageWithSize:35];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(nightMode) name:@"night" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(dayMode) name:@"day" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(supportedInterfaceOrientationsForWindow:) name:@"requireLandscape" object:nil];
}

-(UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window{
    if ([userDefaults boolForKey:@"allowLandscape"]) return UIInterfaceOrientationMaskLandscape | UIInterfaceOrientationMaskPortrait;
    return UIInterfaceOrientationMaskPortrait;
}

- (void)setTabbarImageWithSize:(CGFloat)size{
    
    CGRect frame = CGRectMake(0, 0, size, size);
    
    _tabBarController.tabBar.items[0].image =  [[AlphaIcons imageOfPagesUnselectedWithFrame:frame] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    _tabBarController.tabBar.items[1].image =  [[AlphaIcons imageOfHorizonUnselectedWithFrame:frame] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    _tabBarController.tabBar.items[2].image = [[AlphaIcons imageOfProfileUnselectedWithFrame:frame] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    _tabBarController.tabBar.items[0].selectedImage =  [[AlphaIcons imageOfPagesSelectedWithFrame:frame] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    _tabBarController.tabBar.items[1].selectedImage =  [[AlphaIcons imageOfHorizonSelectedWithFrame:frame] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
    _tabBarController.tabBar.items[2].selectedImage = [[AlphaIcons imageOfProfileSelectedWithFrame:frame] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
}

- (void)nightMode{
    
    [[UINavigationBar appearance] setTintColor:NightTextColor];
    [UIView animateWithDuration:0.3 animations:^{
        _articlesListViewController.navigationController.navigationBar.barTintColor = NightBackgroundColor;
        _mediaListViewController.navigationController.navigationBar.barTintColor = NightBackgroundColor;
        _profileViewController.navigationController.navigationBar.barTintColor = NightBackgroundColor;
        self.window.backgroundColor = NightBackgroundColor;
        _tabBarController.tabBar.backgroundColor = NightBackgroundColor;
        _tabBarController.tabBar.barTintColor = NightBackgroundColor;
    }];
}

- (void)dayMode{
    [UIView animateWithDuration:0.4 animations:^{
        [[UINavigationBar appearance] setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys: [UIColor whiteColor], NSForegroundColorAttributeName, [UIFont systemFontOfSize:21], NSFontAttributeName, nil]];
        _window.backgroundColor = [userDefaults colorForKey:@"viewBackgroundColor"];
        _tabBarController.tabBar.barTintColor = [userDefaults colorForKey:@"NavigationBarTinColor"];
        _articlesListViewController.navigationController.navigationBar.barTintColor = [userDefaults colorForKey:@"NavigationBarTinColor"];
        _mediaListViewController.navigationController.navigationBar.barTintColor = [userDefaults colorForKey:@"NavigationBarTinColor"];
        _profileViewController.navigationController.navigationBar.barTintColor = [userDefaults colorForKey:@"NavigationBarTinColor"];
    }];
}

- (void)themeColorUpdate:(NSNotification *)notification{
    
        _articlesListViewController.navigationController.navigationBar.barTintColor = notification.userInfo[@"dark"];
        _mediaListViewController.navigationController.navigationBar.barTintColor = notification.userInfo[@"dark"];
        _profileViewController.navigationController.navigationBar.barTintColor = notification.userInfo[@"dark"];
    
    self.window.backgroundColor = notification.userInfo[@"light"];
}

- (void)userLoginStatusChanged:(NSNotification *)notification{
    
    AVUser *currentUser = [AVUser currentUser];
    if (currentUser) {
        print(@"用户已确认登录currentUser:%@",currentUser.username);
        [[NSNotificationCenter defaultCenter] postNotificationName:@"loginAction" object:self userInfo:@{@"username":currentUser.username}];
    }else{
        print(@"当前用户为空");
    }
}
-(void)dealloc{
    
    [[AFNetworkReachabilityManager sharedManager] stopMonitoring];
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

@end
