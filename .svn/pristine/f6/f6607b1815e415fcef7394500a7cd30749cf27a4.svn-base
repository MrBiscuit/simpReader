//
//  <%= klass.name %>+<%= property.cap_name %>.m
//  <%= klass.name %>+<%= property.cap_name %>
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "<%= klass.name %>+<%= property.cap_name %>.h"
#import "DKNightVersionManager.h"
#import "objc/runtime.h"

@interface <%= klass.name %> ()

@property (nonatomic, strong) UIColor *normal<%= property.cap_name %>;

@end

@implementation <%= klass.name %> (<%= property.cap_name %>)

+ (void)load {
    static dispatch_once_t onceToken;                                              
    dispatch_once(&onceToken, ^{                                                   
        Class class = [self class];                                                
        SEL originalSelector = @selector(<%= property.setter_selector_name %>);                                  
        SEL swizzledSelector = @selector(hook_<%= property.setter_selector_name %>);                                 
        Method originalMethod = class_getInstanceMethod(class, originalSelector);  
        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);  
        BOOL didAddMethod =                                                        
        class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));                   
        if (didAddMethod){
            class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));           
        } else {                                                                   
            method_exchangeImplementations(originalMethod, swizzledMethod);        
        }
    });
    [DKNightVersionManager addClassToSet:self.class];
}

- (void)hook_<%= property.setter %> {
    if ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) [self setNormal<%= property.cap_name %>:<%= property.name %>];
    [self hook_<%= property.set_color_method(property.name) %>];
}

- (UIColor *)night<%= property.cap_name %> {
    UIColor *nightColor = objc_getAssociatedObject(self, @selector(night<%= property.cap_name %>));
    if (nightColor) {
        return nightColor;
    } else {
        UIColor *resultColor = self.normal<%= property.cap_name %> ?: <% if property.name == 'tintColor' || property.name == 'titleColor' %><%= '[UIColor whiteColor]' %><% else %><%= '[UIColor clearColor]' %><% end %>;
        return resultColor;
    }
}

- (void)setNight<%= property.cap_name %>:(UIColor *)night<%= property.cap_name %> {
    if ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNight) [self <%= property.set_color_method("night" + property.cap_name) %>];
    objc_setAssociatedObject(self, @selector(night<%= property.cap_name %>), night<%= property.cap_name %>, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (UIColor *)normal<%= property.cap_name %> {
    return objc_getAssociatedObject(self, @selector(normal<%= property.cap_name %>))<% if klass.name == 'UIBarButtonItem' && property.name == 'tintColor' %><%= '?: [UIColor blueColor]' %><% end %>;
}

- (void)setNormal<%= property.cap_name %>:(UIColor *)normal<%= property.cap_name %> {
    objc_setAssociatedObject(self, @selector(normal<%= property.cap_name %>), normal<%= property.cap_name %>, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

@end
