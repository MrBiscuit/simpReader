//
//  HistoryViewController.m
//  ProjectAlpha
//
//  Created by lanou3g on 11/2/15.
//  Copyright © 2015 com.sunshuaiqi. All rights reserved.
//

#import "HistoryViewController.h"
#import "HistoryTableViewCell.h"
#import "DataHandle.h"
#import "FavoriteModel.h"
#import <AVOSCloud.h>
#import "LoginViewController.h"
#import "LiteraryDetailViewController.h"
#import "MoodLogDetailViewController.h"
#pragma mark- 属性
@interface HistoryViewController ()<UITableViewDelegate,UITableViewDataSource>
// 列表视图↓
@property(nonatomic, strong) UITableView *tableView;

@property(nonatomic,strong) NSMutableArray * array; // 存储模型数组

@property(nonatomic,strong)UIView * verticalTimeLine;

@end

#pragma mark-
#pragma mark- 实现
@implementation HistoryViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = @"最近阅读";
    self.view.backgroundColor = [UIColor whiteColor];
    self.tableView.contentInset = UIEdgeInsetsMake(0, 0, 50, 0);
    
    UIBarButtonItem * deleteBI = [[UIBarButtonItem alloc] initWithTitle:@"删除" style:UIBarButtonItemStylePlain target:self action:@selector(didDeleteBI:)];
    self.navigationItem.rightBarButtonItem = deleteBI;
    
    
    [self judgeUserIsLogin];
    [self initializeSubViews]; // 调用-初始化视图
}

#pragma mark -- 判断用户是否登录 （登录过直接查看；未登录先登录，登录成功之后查看最近阅读）
- (void)judgeUserIsLogin
{

    if (![AVUser currentUser]) {
        
        UIAlertController * alter = [UIAlertController alertControllerWithTitle:@"温情提示" message:@"亲，登录后才可查看最近阅读哦" preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction * action1 = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
        UIAlertAction * action2 = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            
            LoginViewController * loginVC = [LoginViewController new];
            [self.navigationController pushViewController:loginVC animated:YES];
            
        }];
        [alter addAction:action1];
        [alter addAction:action2];
        [self presentViewController:alter animated:YES completion:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(loginSuccess:) name:@"userLogIn" object:nil];
    }else {
        
        // 初始化数组
        self.array = [NSMutableArray array];
        self.array = [[DataHandle SharedData] qureyData];
        [self.tableView reloadData];
        
    }

}


#pragma mark -- 登录成功之后调用的方法--
- (void)loginSuccess:(NSNotification *)notification
{

    [self judgeUserIsLogin];

}


#pragma mark -- 删除浏览记录
- (void)didDeleteBI:(UIBarButtonItem *)BI
{
    // 操作数据库
    [[DataHandle SharedData] deleteAllData];

    // 操作数据源
    [_array removeAllObjects];
    
    // 操作UI
    [_verticalTimeLine removeFromSuperview];
    
    [self.tableView reloadData];
    
}

#pragma mark- 初始化视图
- (void)initializeSubViews{
#pragma mark 垂直时间线初始化
    self.verticalTimeLine = [UIView new];
    
    _verticalTimeLine.backgroundColor = [UIColor colorWithRed:0.0767 green:0.6193 blue:0.9251 alpha:0.60]; // 时间轴颜色
    _verticalTimeLine.frame = CGRectMake(24, 64, 2, self.array.count * 200);
    [self.view addSubview:_verticalTimeLine]; // 添加到self.view
                                        // 时间轴约束↓
    
//    [verticalTimeLine mas_makeConstraints:^(MASConstraintMaker *make){
//        make.top.equalTo(self.view.mas_top).offset(64);
//        make.left.equalTo(self.view).offset(24); // 左边距: 9像素(有待改为活值)
//        make.width.mas_equalTo(2); // 宽度: 2像素
//        make.height.mas_equalTo(self.view.frame.size.height * 2);
//    }];

#pragma mark 列表视图初始化
    _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 64, ScreenWidth, ScreenHeight - 64) style:UITableViewStylePlain];
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone; // 取消分割线
    
    // 设置代理↓
    _tableView.delegate = self;
    _tableView.dataSource = self;
    _tableView.backgroundColor = [UIColor clearColor];
    [self.view addSubview:_tableView]; // 添加到self.view
    
}

#pragma mark- 区间数
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}
#pragma mark- 区间行数
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return _array.count;
}
#pragma mark- 行单元格制定
-(HistoryTableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    HistoryTableViewCell * cell=[tableView dequeueReusableCellWithIdentifier:@"reuseIdentifier"];
    if (cell==nil) {
        cell=[[HistoryTableViewCell alloc] initWithStyle:(UITableViewCellStyleDefault) reuseIdentifier:@"reuseIdentifier"];
    }
   
    FavoriteModel * model = _array[indexPath.row];
    cell.model = model;
    return cell;
}

#pragma mark- 行单元格高度
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 200;
}

#pragma mark 根据paragraph的值判断进入哪种类型的详情页
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{

    FavoriteModel * model = _array[indexPath.row];
    
    if (model.paragraph) {
        
        // 存在段落
        MoodLogDetailViewController * moodDetailVC = [MoodLogDetailViewController new];
        UINavigationController * NC = [[UINavigationController alloc] initWithRootViewController:moodDetailVC];
        moodDetailVC.content = model.paragraph;
        moodDetailVC.imgUrl = model.imgUrl;
        moodDetailVC.title = model.titleStr;
        moodDetailVC.ID = model.ID;
        [self showViewController:NC sender:nil];

    }else {
        // 段落为空
        LiteraryDetailViewController * detailVC = [LiteraryDetailViewController new];
        
        detailVC.ID = [model.ID integerValue];
        detailVC.title = model.titleStr;
        [self.navigationController pushViewController:detailVC animated:YES];
        
    }

    
    
}

#pragma mark- 收到内存警告
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    
}


@end
